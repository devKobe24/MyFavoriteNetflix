// 플러그인 설정: 프로젝트에 필요한 기본 플러그인들을 정의
plugins {
    id 'java' // 자바 플러그인
    id 'org.springframework.boot' version '3.2.7' // 스프링 부트 플러그인
    id 'io.spring.dependency-management' version '1.1.5' // 스프링 의존성 관리 플러그인
}

// 프로젝트 기본 정보
group = 'com.kobe'
version = '1.0.0'

// 자바 버전 설정
java {
    sourceCompatibility = JavaVersion.VERSION_17 // Spring Boot 3.x는 Java 17 이상이 필수.
}

// 의존성 설정을 위한 추가 구성
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

// 의존성을 다운로드할 원격 저장소
repositories {
    mavenCentral() // 중앙 Maven 저장소
}

// 프로젝트에 필요한 라이브러리(의존성) 목록
dependencies {
    // Spring Web: REST API, 내장 Tomcat 서버 등 웹 개발에 필요한 모든 것을 포함합니다.
    implementation 'org.springframework.boot:spring-boot-starter-web'

    // Spring Data JPA: 데이터베이스 작업을 쉽게 할 수 있도록 도와줍니다. (JPA, Hibernate 포함)
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    // Lombok: @Getter, @Setter, @ToString, 생성자 등을 자동으로 만들어 코드를 간결하게 해줍니다.
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MySQL Connector: Spring 애플리케이션이 MySQL 데이터베이스와 통신할 수 있도록 하는 드라이버입니다.
    // runtimeOnly는 실행 시에만 필요하다는 의미입니다.
    runtimeOnly 'com.mysql:mysql-connector-j'

    // SpringDoc OpenAPI (Swagger): API 문서를 자동으로 생성하고, 테스트할 수 있는 UI를 제공합니다.
    // Spring Boot 3.x 이상에서는 springdoc을 사용하는 것이 표준입니다.
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'

    // Spring Boot Starter Test: JUnit 5, Mockito 등 테스트에 필요한 라이브러리들을 포함합니다.
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}
